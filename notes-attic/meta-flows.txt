==========
Fri Jul 07 12:39:23 -0700 2017

Progress on this:

 * assigning self as upstream had to be abandoned because it was causing recursion errors.  They were coming into play when indexing the upstream entries for _upstream_hash.  This is already a legacy of a now-abandoned minor strategy for LCIA (getting inventory systems to use existing flow entities for characterization purposes) but now that we're doing LCIA via the Qdb maybe that whole thing can be carved out.

What is _upstream_hash being used for?  _check_upstream is used in all the major providers, as expected, before creating a new flow or quantity.  We should do that, I suppose. __getitem__ checks upstream, but only by UUID / external ref.  the upstream hash garbage was being used to detect matches by name, for the universe of ecoinvent flows that are distinguished by a canonical name.

I mean, the whole thing stinks, and I can't think of a specific instance in which it is required, ASSUMING we are committed to using the Qdb for characterizations.  So maybe we should pull it all out.

OK, RESOLVED.

We are still cagey about recursively setting Qdb as the upstream to EVERYTHING. Not even clear it is required either.

But for now we don't need to do that.

revisit this later.

Fri 2017-07-07 23:46:33 -0700

FlowABLES-- should have been objects (but entities? no)
write header
write row



Mon 2017-07-10 13:13:05 -0700

Current challenge relates to the abstracting of the FlowablesGrid into the generic grid.

My current thinking is that the flowables grid should have two left-hand header columns, for indicating the substance and compartment, then n data columns, then 1 right-hand header column for indicating I suppose the CAS number.  THe problem is: how to encode that?

the generic grid wants the user to specify columns sequentially, but before the columns can be parsed there needs to be a way to extract the row index. _pull_row_from_item provides that- and gets overridden in subclasses.  So _pull_row_from_item returns a tuple, and the tuple is the index.  Is it ALWAYS a tuple?  (ans: apparently, yes)

Now- SINCE pull_row_from_item is a method, and since it always returns a tuple, it makes sense for the class to also provide header names.  and header widths.



==========
Mon Jun 19 23:56:36 -0700 2017

Need to do some thinking on this.

First of all: 11104-93-1 is NOT A CAS NUMBER.  STOP USING IT.

But both ecoinvent and plastics europe use it. it shows up in general search results.

Problem:

 - LCIA method does not report 'Nitrogen oxides'
 - flow is a composite of other flows- sometimes known

what would be the desired outcome?

 the intelligent interpretation is that the higher of the two is the more abundant (NO2) but that is some serious reasoning.

 in an automated capacity, they should be summed and allocated to one or a mix in a configurable way.  Where would that configuration happen?

could be modeled as a fragment

that means there needs to be a serious background lookup.

how do I want to configure it? you can't call them synonyms because of the CAS conflict.

The *correct* solution would be to assign the LCIA factors to the flow
in convert. so if no cf is found, perform a fallback.

and that is a second set of synonyms? or a second set of compartments / CLookups?

how can the conversion fail?

 - no flowables
 - compartment doesn't match / dist too long
   = difference between find() and cfs()

There is a "handle flowables" that is already happening with the biogenic CO2 switch-- if at that point there are no flowables, then perform an early fallback, and there--

The solution is to *characterize* the flow- locally- in the Qdb- and use self as an upstream.

Brilliant.

 how? LciaResult stores results
 the archives all have the qdb as upstream

So here's the unit test:

 - load a non-stored local ref- PA66- check it against lcias[ext_ref].
 - first time through- no cf so the LCIA Result is thus. use isclose
 - add flow to qdb, add cf of lcias[ext_ref] to that flow
 - save qdb- where-

the reference_quantities should not be in git- it should be in cat-food
which has got to be a git repo. ffs I should be tracking this.



 - flowable has

Tue 2017-06-20 01:07:45 -0700

This is also the solution to the USLCI ecospold import [maybe it is an 'ecospold solver'?]

but meant in general.

now the test-- add the nox flow and see if it comes up

Tue 2017-06-20 02:17:03 -0700

Can't do that- there's a recursion error somewhere between catalog refs get_item and upstream... but that's ok. just 2hours of my life.
anyway, other stuff works.
